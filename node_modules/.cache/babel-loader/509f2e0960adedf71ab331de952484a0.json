{"ast":null,"code":"const WIDTH = 640;\nconst HEIGHT = 480;\n\nconst getRadian = angle => angle * Math.PI / 180;\n\nclass DistanceSensor {\n  constructor() {\n    this.maxDistance = 100;\n\n    this.getValue = (worldPixels, carX, carY, carAngle) => {\n      return 0;\n    };\n  }\n\n}\n\nclass Car {\n  constructor() {\n    this.x = 30;\n    this.y = 100;\n    this.height = 25;\n    this.width = 40;\n    this.speed = 0;\n    this.sensors = [new DistanceSensor()];\n    this.maxSpeed = 3;\n    this.acceleration = 0.5;\n    this.angle = 0;\n\n    this.speedUp = () => {\n      this.speed = Math.min(this.maxSpeed, this.speed += this.acceleration);\n    };\n\n    this.speedDown = () => {\n      this.speed = Math.max(0, this.speed -= this.acceleration);\n    };\n\n    this.steerLeft = () => {\n      this.angle = (this.angle - 1) % 360;\n    };\n\n    this.steerRight = () => {\n      this.angle = (this.angle + 1) % 360;\n    };\n\n    this.update = worldPixels => {\n      this.x += this.speed * Math.cos(getRadian(this.angle));\n      this.y += this.speed * Math.sin(getRadian(this.angle));\n      const sensorData = this.collectSensorData(worldPixels);\n    };\n\n    this.collectSensorData = worldPixels => {\n      return this.sensors.map(sensor => sensor.getValue(worldPixels, this.x, this.y, this.angle));\n    };\n  }\n\n}\n\n;\nexport default function sketch(p) {\n  let worldPixels;\n  let canvas;\n  let image;\n  const car = new Car();\n\n  p.setup = () => {\n    image = p.createImage(WIDTH, HEIGHT);\n    canvas = p.createCanvas(WIDTH, HEIGHT);\n    p.noStroke();\n    p.background(0);\n  };\n\n  p.mousePressed = () => {\n    console.log(p.get(p.mouseX, p.mouseY));\n  };\n\n  p.draw = () => {\n    p.background(255);\n    p.update();\n\n    if (image) {\n      p.image(image, 0, 0, WIDTH, HEIGHT);\n    }\n\n    p.translate(car.x + car.width / 2, car.y + car.height / 2);\n    p.angleMode(p.DEGREES);\n    p.rotate(car.angle);\n    p.fill(150, 100, 200);\n    const carRelativeCenterX = 0 - car.width / 2;\n    const carRelativeCenterY = 0 - car.height / 2;\n    p.rect(carRelativeCenterX, carRelativeCenterY, car.width, car.height);\n    p.fill(150, 150, 150);\n    p.rect(carRelativeCenterX + 20, carRelativeCenterY + 5, 10, 15);\n    p.fill('black');\n    p.rect(carRelativeCenterX + 36, carRelativeCenterY + 0, 4, 6);\n    p.rect(carRelativeCenterX + 36, carRelativeCenterY + 19, 4, 6);\n    p.stroke('red');\n    car.sensors.map(sensor => {\n      const targetX = sensor.maxDistance * Math.cos(getRadian(car.angle));\n      const targetY = sensor.maxDistance * Math.sin(getRadian(car.angle));\n      p.rotate(-car.angle);\n      p.line(0, 0, targetX, targetY);\n    });\n    p.stroke(1);\n  };\n\n  p.update = () => {\n    if (p.keyIsDown(87)) {\n      car.speedUp();\n    }\n\n    if (p.keyIsDown(83)) {\n      car.speedDown();\n    }\n\n    if (p.keyIsDown(65)) {\n      car.steerLeft();\n    }\n\n    if (p.keyIsDown(68)) {\n      car.steerRight();\n    }\n\n    car.update(worldPixels);\n  };\n\n  p.myCustomRedrawAccordingToNewPropsHandler = newProps => {\n    if (canvas) p.fill(newProps.color);\n  };\n\n  p.keyPressed = () => {\n    if (p.keyCode == 76) {\n      worldPixels = JSON.parse(window.localStorage.getItem('map'));\n      const image1 = p.get(0, 0, WIDTH, HEIGHT);\n      image1.loadPixels();\n\n      for (var i = 0; i < image1.pixels.length; i += 4) {\n        const startIndex = Math.floor(i / 4);\n        image1.pixels[i] = worldPixels[startIndex][0];\n        image1.pixels[i + 1] = worldPixels[startIndex][1];\n        image1.pixels[i + 2] = worldPixels[startIndex][2];\n      }\n\n      image1.updatePixels();\n      image = image1;\n    }\n  };\n}","map":{"version":3,"sources":["/home/caner/Desktop/selfcar/src/components/game-sketch.js"],"names":["WIDTH","HEIGHT","getRadian","angle","Math","PI","DistanceSensor","maxDistance","getValue","worldPixels","carX","carY","carAngle","Car","x","y","height","width","speed","sensors","maxSpeed","acceleration","speedUp","min","speedDown","max","steerLeft","steerRight","update","cos","sin","sensorData","collectSensorData","map","sensor","sketch","p","canvas","image","car","setup","createImage","createCanvas","noStroke","background","mousePressed","console","log","get","mouseX","mouseY","draw","translate","angleMode","DEGREES","rotate","fill","carRelativeCenterX","carRelativeCenterY","rect","stroke","targetX","targetY","line","keyIsDown","myCustomRedrawAccordingToNewPropsHandler","newProps","color","keyPressed","keyCode","JSON","parse","window","localStorage","getItem","image1","loadPixels","i","pixels","length","startIndex","floor","updatePixels"],"mappings":"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","sourcesContent":["const WIDTH = 640;\nconst HEIGHT = 480;\nconst getRadian = angle => angle * Math.PI / 180;\nclass DistanceSensor{\n  maxDistance = 100;\n  getValue = (worldPixels, carX, carY, carAngle) =>{\n    return 0;\n  };\n}\nclass Car{\n  x = 30;\n  y = 100;\n  height = 25;\n  width = 40;\n  speed = 0;\n  sensors = [new DistanceSensor()];\n  maxSpeed = 3;\n  acceleration = 0.5;\n  angle = 0;\n  speedUp = () => {\n    this.speed = Math.min(this.maxSpeed, this.speed += this.acceleration);\n  };\n  speedDown = () => {\n    this.speed = Math.max(0, this.speed -= this.acceleration);\n  };\n  steerLeft = () => {\n    this.angle = (this.angle -1) % 360;\n  }\n  steerRight = () => {\n    this.angle = (this.angle +1) % 360;\n  }\n  update = (worldPixels) => {\n    this.x += this.speed * Math.cos(getRadian(this.angle));\n    this.y += this.speed * Math.sin(getRadian(this.angle));\n    const sensorData = this.collectSensorData(worldPixels);\n  };\n  collectSensorData = (worldPixels) => {\n    return this.sensors.map(sensor => sensor.getValue(worldPixels, this.x, this.y, this.angle));\n  }\n};\nexport default function sketch(p){\n  let worldPixels;\n  let canvas;\n  let image;\n  const car = new Car();\n\n  p.setup = () => {\n    image = p.createImage(WIDTH, HEIGHT);\n    canvas = p.createCanvas(WIDTH, HEIGHT);\n    p.noStroke();\n    p.background(0);\n  }\n  p.mousePressed = () => {\n    console.log(p.get(p.mouseX, p.mouseY));\n  }\n  p.draw = () => {\n    p.background(255);\n    p.update();\n    if (image){\n      p.image(image,0,0,WIDTH,HEIGHT);\n    }\n    p.translate(car.x + car.width/2, car.y + car.height/2);\n    p.angleMode(p.DEGREES);\n    p.rotate( car.angle);\n    p.fill(150,100,200);\n    const carRelativeCenterX = 0-car.width / 2;\n    const carRelativeCenterY = 0-car.height / 2;\n    p.rect(carRelativeCenterX,carRelativeCenterY, car.width, car.height);\n    p.fill(150,150,150);\n    p.rect(carRelativeCenterX + 20 ,carRelativeCenterY + 5,10,15);\n    p.fill('black');\n    p.rect(carRelativeCenterX + 36,carRelativeCenterY + 0,4,6);\n    p.rect(carRelativeCenterX + 36,carRelativeCenterY + 19,4,6);\n    p.stroke('red');\n    car.sensors.map(sensor => {\n      const targetX = sensor.maxDistance * Math.cos(getRadian(car.angle));\n      const targetY = sensor.maxDistance * Math.sin(getRadian(car.angle));\n      p.rotate(-car.angle);\n      p.line(0,0,targetX,targetY);\n    });\n    p.stroke(1);\n  }\n  p.update = () => {\n      if (p.keyIsDown(87)){\n        car.speedUp();\n      }\n      if (p.keyIsDown(83)){\n        car.speedDown();\n      }\n      if (p.keyIsDown(65)){\n        car.steerLeft();\n      }\n      if (p.keyIsDown(68)){\n        car.steerRight();\n      }\n    car.update(worldPixels);\n  };\n  p.myCustomRedrawAccordingToNewPropsHandler = (newProps) => {\n    if(canvas)\n      p.fill(newProps.color);\n  }\n  p.keyPressed = () => {\n    if(p.keyCode == 76){\n        worldPixels = JSON.parse(window.localStorage.getItem('map'));\n        const image1 = p.get(0, 0, WIDTH, HEIGHT);\n        image1.loadPixels();\n        for(var i = 0; i < image1.pixels.length; i += 4){\n          const startIndex = Math.floor(i/4);\n          image1.pixels[i] = worldPixels[startIndex][0];\n          image1.pixels[i+1] = worldPixels[startIndex][1];\n          image1.pixels[i+2] = worldPixels[startIndex][2];\n      }\n      image1.updatePixels();\n      image=image1;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}