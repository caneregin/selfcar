{"ast":null,"code":"import { Layer, Network } from 'synaptic';\n\nclass NNetwork {\n  constructor() {\n    this.learningRate = 0.3;\n    var inputLayer = new Layer(1);\n    var hiddenLayer = new Layer(5);\n    var outputLayer = new Layer(4);\n    inputLayer.project(hiddenLayer);\n    hiddenLayer.project(outputLayer);\n    this.nn = new Network({\n      input: inputLayer,\n      hidden: [hiddenLayer],\n      output: outputLayer\n    });\n\n    for (var i = 0; i < 10000; i++) {\n      this.nn.activate([Math.random()]);\n      this.nn.propagate(this.learningRate, [Math.random(), Math.random(), Math.random(), Math.random()]);\n    }\n  }\n\n}\n\nconst WIDTH = 640;\nconst HEIGHT = 480;\n\nconst getRadian = angle => angle * Math.PI / 180;\n\nclass DistanceSensor {\n  constructor() {\n    this.maxDistance = 100;\n    this.foundX = 0;\n    this.foundY = 0;\n\n    this.findIntersection = (worldPixels, targetX, targetY, carX, carY, carAngle) => {\n      const distance = Math.sqrt(Math.pow(carX - targetX, 2) + Math.pow(carY - targetY), 2);\n\n      if (distance > this.maxDistance) {\n        return false;\n      }\n\n      const pixel = worldPixels[Math.floor(carY) * WIDTH + Math.floor(carX)];\n\n      if (pixel && pixel[0] !== 0) {\n        const centerX = carX + (targetX - carX) / 2;\n        const centerY = carY + (targetY - carY) / 2;\n        return this.findIntersection(worldPixels, carX + 1 * Math.cos(getRadian(carAngle)), carY + 1 * Math.sin(getRadian(carAngle)), centerX, centerY, carAngle);\n      }\n\n      return [carX, carY];\n    };\n\n    this.getValue = (worldPixels, carX, carY, carAngle) => {\n      const targetX = carX + this.maxDistance * Math.cos(getRadian(carAngle));\n      const targetY = carY + this.maxDistance * Math.sin(getRadian(carAngle));\n\n      if (worldPixels) {\n        const result = this.findIntersection(worldPixels, carX, carY, targetX, targetY, carAngle);\n        const [foundX, foundY] = result ? result : [targetX, targetY];\n        this.foundX = foundX;\n        this.foundY = foundY;\n        return Math.min(1, Math.sqrt(Math.pow(carX - foundX, 2) + Math.pow(carY - foundY, 2)) / this.maxDistance);\n      }\n\n      return 0;\n    };\n  }\n\n}\n\nclass Car {\n  constructor() {\n    this.x = 30;\n    this.y = 100;\n    this.height = 25;\n    this.width = 40;\n    this.speed = 0;\n    this.sensors = [new DistanceSensor()];\n    this.maxSpeed = 3;\n    this.acceleration = 0.5;\n    this.angle = 0;\n\n    this.speedUp = () => {\n      this.speed = Math.min(this.maxSpeed, this.speed += this.acceleration);\n    };\n\n    this.speedDown = () => {\n      this.speed = Math.max(0, this.speed -= this.acceleration);\n    };\n\n    this.steerLeft = () => {\n      this.angle = (this.angle - 1) % 360;\n    };\n\n    this.steerRight = () => {\n      this.angle = (this.angle + 1) % 360;\n    };\n\n    this.update = (myNetwork, worldPixels) => {\n      this.x += this.speed * Math.cos(getRadian(this.angle));\n      this.y += this.speed * Math.sin(getRadian(this.angle));\n      const sensorData = this.collectSensorData(worldPixels);\n      const [speedUp, speedDown, steerLeft, steerRight] = myNetwork.nn.activate(sensorData);\n      console.log(speedUp, speedDown, steerLeft, steerRight); //  myNetwork.propagate(learningRate, [0]);\n    };\n\n    this.collectSensorData = worldPixels => {\n      return this.sensors.map(sensor => sensor.getValue(worldPixels, this.x, this.y, this.angle));\n    };\n  }\n\n}\n\n;\nexport default function sketch(p) {\n  let worldPixels;\n  let canvas;\n  let image;\n  const car = new Car();\n  const myNetwork = new NNetwork();\n\n  p.setup = () => {\n    image = p.createImage(WIDTH, HEIGHT);\n    canvas = p.createCanvas(WIDTH, HEIGHT);\n    p.noStroke();\n    p.background(0);\n  };\n\n  p.mousePressed = () => {};\n\n  p.draw = () => {\n    p.background(255);\n    p.update();\n\n    if (image) {\n      p.image(image, 0, 0, WIDTH, HEIGHT);\n    }\n\n    p.translate(car.x + car.width / 2, car.y + car.height / 2);\n    p.angleMode(p.DEGREES);\n    p.rotate(car.angle);\n    p.fill(150, 100, 200);\n    const carRelativeCenterX = 0 - car.width / 2;\n    const carRelativeCenterY = 0 - car.height / 2;\n    p.rect(carRelativeCenterX, carRelativeCenterY, car.width, car.height);\n    p.fill(150, 150, 150);\n    p.rect(carRelativeCenterX + 20, carRelativeCenterY + 5, 10, 15);\n    p.fill('black');\n    p.rect(carRelativeCenterX + 36, carRelativeCenterY + 0, 4, 6);\n    p.rect(carRelativeCenterX + 36, carRelativeCenterY + 19, 4, 6);\n    p.stroke('red');\n    car.sensors.map(sensor => {\n      const targetX = sensor.maxDistance * Math.cos(getRadian(car.angle));\n      const targetY = sensor.maxDistance * Math.sin(getRadian(car.angle));\n      p.rotate(-car.angle);\n      p.line(0, 0, targetX, targetY);\n      p.translate(0, 0);\n      p.rect(sensor.foundX, sensor.foundY, 15, 15);\n    });\n    p.stroke(1);\n  };\n\n  p.update = () => {\n    if (p.keyIsDown(87)) {\n      car.speedUp();\n    }\n\n    if (p.keyIsDown(83)) {\n      car.speedDown();\n    }\n\n    if (p.keyIsDown(65)) {\n      car.steerLeft();\n    }\n\n    if (p.keyIsDown(68)) {\n      car.steerRight();\n    }\n\n    car.update(myNetwork, worldPixels);\n  };\n\n  p.myCustomRedrawAccordingToNewPropsHandler = newProps => {\n    if (canvas) p.fill(newProps.color);\n  };\n\n  p.keyPressed = () => {\n    if (p.keyCode == 76) {\n      worldPixels = JSON.parse(window.localStorage.getItem('map'));\n      const image1 = p.get(0, 0, WIDTH, HEIGHT);\n      image1.loadPixels();\n\n      for (var i = 0; i < image1.pixels.length; i += 4) {\n        const startIndex = Math.floor(i / 4);\n        image1.pixels[i] = worldPixels[startIndex][0];\n        image1.pixels[i + 1] = worldPixels[startIndex][1];\n        image1.pixels[i + 2] = worldPixels[startIndex][2];\n      }\n\n      image1.updatePixels();\n      image = image1;\n    }\n  };\n}","map":{"version":3,"sources":["/home/caner/Desktop/selfcar/src/components/game-sketch.js"],"names":["Layer","Network","NNetwork","constructor","learningRate","inputLayer","hiddenLayer","outputLayer","project","nn","input","hidden","output","i","activate","Math","random","propagate","WIDTH","HEIGHT","getRadian","angle","PI","DistanceSensor","maxDistance","foundX","foundY","findIntersection","worldPixels","targetX","targetY","carX","carY","carAngle","distance","sqrt","pow","pixel","floor","centerX","centerY","cos","sin","getValue","result","min","Car","x","y","height","width","speed","sensors","maxSpeed","acceleration","speedUp","speedDown","max","steerLeft","steerRight","update","myNetwork","sensorData","collectSensorData","console","log","map","sensor","sketch","p","canvas","image","car","setup","createImage","createCanvas","noStroke","background","mousePressed","draw","translate","angleMode","DEGREES","rotate","fill","carRelativeCenterX","carRelativeCenterY","rect","stroke","line","keyIsDown","myCustomRedrawAccordingToNewPropsHandler","newProps","color","keyPressed","keyCode","JSON","parse","window","localStorage","getItem","image1","get","loadPixels","pixels","length","startIndex","updatePixels"],"mappings":"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","sourcesContent":["import {Layer, Network} from 'synaptic';\nclass NNetwork{\n  learningRate = 0.3;\n  constructor(){\n    var inputLayer = new Layer(1);\n    var hiddenLayer = new Layer(5);\n    var outputLayer = new Layer(4);\n    inputLayer.project(hiddenLayer);\n    hiddenLayer.project(outputLayer);\n    this.nn = new Network({\n      input: inputLayer,\n    \thidden: [hiddenLayer],\n    \toutput: outputLayer\n    });\n    for(var i=0;i<10000;i++){\n      this.nn.activate([Math.random()]);\n      this.nn.propagate(this.learningRate,\n        [Math.random(),Math.random(),Math.random(),Math.random()]);\n    }\n  }\n}\nconst WIDTH = 640;\nconst HEIGHT = 480;\nconst getRadian = angle => angle * Math.PI / 180;\nclass DistanceSensor{\n  maxDistance = 100;\n  foundX = 0;\n  foundY = 0;\n  findIntersection = (worldPixels, targetX, targetY, carX, carY, carAngle) => {\n    const distance = Math.sqrt(Math.pow((carX - targetX),2)+Math.pow(carY-targetY),2)\n    if(distance > this.maxDistance){\n      return false;\n    }\n    const pixel = worldPixels[Math.floor(carY) * WIDTH + Math.floor(carX)];\n    if(pixel && pixel[0] !== 0){\n      const centerX = carX + (targetX - carX) / 2;\n      const centerY = carY + (targetY - carY) / 2;\n      return this.findIntersection(worldPixels,\n        carX + 1 * Math.cos(getRadian(carAngle)),\n        carY + 1 * Math.sin(getRadian(carAngle)),\n        centerX,\n        centerY,\n        carAngle\n      );\n    }\n    return [carX, carY];\n  }\n  getValue = (worldPixels, carX, carY, carAngle) =>{\n    const targetX = carX + this.maxDistance * Math.cos(getRadian(carAngle));\n    const targetY = carY + this.maxDistance * Math.sin(getRadian(carAngle));\n    if(worldPixels){\n      const result = this.findIntersection(worldPixels, carX, carY, targetX, targetY, carAngle);\n      const [foundX, foundY] = result ? result : [targetX,targetY];\n      this.foundX = foundX;\n      this.foundY = foundY;\n      return Math.min(1,Math.sqrt(Math.pow((carX - foundX),2)+Math.pow((carY - foundY),2)) / this.maxDistance);\n    }\n    return 0;\n  };\n}\n\nclass Car{\n  x = 30;\n  y = 100;\n  height = 25;\n  width = 40;\n  speed = 0;\n  sensors = [new DistanceSensor()];\n  maxSpeed = 3;\n  acceleration = 0.5;\n  angle = 0;\n  speedUp = () => {\n    this.speed = Math.min(this.maxSpeed, this.speed += this.acceleration);\n  };\n  speedDown = () => {\n    this.speed = Math.max(0, this.speed -= this.acceleration);\n  };\n  steerLeft = () => {\n    this.angle = (this.angle -1) % 360;\n  }\n  steerRight = () => {\n    this.angle = (this.angle +1) % 360;\n  }\n  update = (myNetwork,worldPixels) => {\n    this.x += this.speed * Math.cos(getRadian(this.angle));\n    this.y += this.speed * Math.sin(getRadian(this.angle));\n    const sensorData = this.collectSensorData(worldPixels);\n    const [speedUp,speedDown,steerLeft,steerRight] = myNetwork.nn.activate(sensorData);\n    console.log(speedUp,speedDown,steerLeft,steerRight);\n  //  myNetwork.propagate(learningRate, [0]);\n\n  };\n  collectSensorData = (worldPixels) => {\n    return this.sensors.map(sensor => sensor.getValue(worldPixels, this.x, this.y, this.angle));\n  }\n};\nexport default function sketch(p){\n  let worldPixels;\n  let canvas;\n  let image;\n  const car = new Car();\n  const myNetwork = new NNetwork();\n  p.setup = () => {\n    image = p.createImage(WIDTH, HEIGHT);\n    canvas = p.createCanvas(WIDTH, HEIGHT);\n    p.noStroke();\n    p.background(0);\n  }\n  p.mousePressed = () => {\n  }\n  p.draw = () => {\n    p.background(255);\n    p.update();\n    if (image){\n      p.image(image,0,0,WIDTH,HEIGHT);\n    }\n    p.translate(car.x + car.width/2, car.y + car.height/2);\n    p.angleMode(p.DEGREES);\n    p.rotate( car.angle);\n    p.fill(150,100,200);\n    const carRelativeCenterX = 0-car.width / 2;\n    const carRelativeCenterY = 0-car.height / 2;\n    p.rect(carRelativeCenterX,carRelativeCenterY, car.width, car.height);\n    p.fill(150,150,150);\n    p.rect(carRelativeCenterX + 20 ,carRelativeCenterY + 5,10,15);\n    p.fill('black');\n    p.rect(carRelativeCenterX + 36,carRelativeCenterY + 0,4,6);\n    p.rect(carRelativeCenterX + 36,carRelativeCenterY + 19,4,6);\n    p.stroke('red');\n    car.sensors.map(sensor => {\n      const targetX = sensor.maxDistance * Math.cos(getRadian(car.angle));\n      const targetY = sensor.maxDistance * Math.sin(getRadian(car.angle));\n      p.rotate(-car.angle);\n      p.line(0,0,targetX,targetY);\n      p.translate(0,0);\n      p.rect(sensor.foundX,sensor.foundY,15,15);\n    });\n    p.stroke(1);\n  }\n  p.update = () => {\n    if (p.keyIsDown(87)){\n      car.speedUp();\n    }\n    if (p.keyIsDown(83)){\n      car.speedDown();\n    }\n    if (p.keyIsDown(65)){\n      car.steerLeft();\n    }\n    if (p.keyIsDown(68)){\n      car.steerRight();\n    }\n    car.update(myNetwork,worldPixels);\n  };\n  p.myCustomRedrawAccordingToNewPropsHandler = (newProps) => {\n    if(canvas)\n      p.fill(newProps.color);\n  }\n  p.keyPressed = () => {\n    if(p.keyCode == 76){\n        worldPixels = JSON.parse(window.localStorage.getItem('map'));\n        const image1 = p.get(0, 0, WIDTH, HEIGHT);\n        image1.loadPixels();\n        for(var i = 0; i < image1.pixels.length; i += 4){\n          const startIndex = Math.floor(i/4);\n          image1.pixels[i] = worldPixels[startIndex][0];\n          image1.pixels[i+1] = worldPixels[startIndex][1];\n          image1.pixels[i+2] = worldPixels[startIndex][2];\n      }\n      image1.updatePixels();\n      image=image1;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}