{"ast":null,"code":"const WIDTH = 640;\nconst HEIGHT = 480;\n\nconst getRadian = angle => angle * Math.PI / 180;\n\nclass DistanceSensor {\n  constructor() {\n    this.maxDistance = 100;\n\n    this.getValue = (worldPixels, carX, carY, carAngle) => {\n      return 0;\n      const targetX = carX + sensor.maxDistance * Math.cos(getRadian(car.angle));\n      const targetY = carY + sensor.maxDistance * Math.sin(getRadian(car.angle));\n    };\n  }\n\n}\n\nclass Car {\n  constructor() {\n    this.x = 30;\n    this.y = 100;\n    this.height = 25;\n    this.width = 40;\n    this.speed = 0;\n    this.sensors = [new DistanceSensor()];\n    this.maxSpeed = 3;\n    this.acceleration = 0.5;\n    this.angle = 0;\n\n    this.speedUp = () => {\n      this.speed = Math.min(this.maxSpeed, this.speed += this.acceleration);\n    };\n\n    this.speedDown = () => {\n      this.speed = Math.max(0, this.speed -= this.acceleration);\n    };\n\n    this.steerLeft = () => {\n      this.angle = (this.angle - 1) % 360;\n    };\n\n    this.steerRight = () => {\n      this.angle = (this.angle + 1) % 360;\n    };\n\n    this.update = worldPixels => {\n      this.x += this.speed * Math.cos(getRadian(this.angle));\n      this.y += this.speed * Math.sin(getRadian(this.angle));\n      const sensorData = this.collectSensorData(worldPixels);\n    };\n\n    this.collectSensorData = worldPixels => {\n      return this.sensors.map(sensor => sensor.getValue(worldPixels, this.x, this.y, this.angle));\n    };\n  }\n\n}\n\n;\nexport default function sketch(p) {\n  let worldPixels;\n  let canvas;\n  let image;\n  const car = new Car();\n\n  p.setup = () => {\n    image = p.createImage(WIDTH, HEIGHT);\n    canvas = p.createCanvas(WIDTH, HEIGHT);\n    p.noStroke();\n    p.background(0);\n  };\n\n  p.mousePressed = () => {\n    console.log(p.get(p.mouseX, p.mouseY));\n  };\n\n  p.draw = () => {\n    p.background(255);\n    p.update();\n\n    if (image) {\n      p.image(image, 0, 0, WIDTH, HEIGHT);\n    }\n\n    p.translate(car.x + car.width / 2, car.y + car.height / 2);\n    p.angleMode(p.DEGREES);\n    p.rotate(car.angle);\n    p.fill(150, 100, 200);\n    const carRelativeCenterX = 0 - car.width / 2;\n    const carRelativeCenterY = 0 - car.height / 2;\n    p.rect(carRelativeCenterX, carRelativeCenterY, car.width, car.height);\n    p.fill(150, 150, 150);\n    p.rect(carRelativeCenterX + 20, carRelativeCenterY + 5, 10, 15);\n    p.fill('black');\n    p.rect(carRelativeCenterX + 36, carRelativeCenterY + 0, 4, 6);\n    p.rect(carRelativeCenterX + 36, carRelativeCenterY + 19, 4, 6);\n    p.stroke('red');\n    car.sensors.map(sensor => {\n      const targetX = sensor.maxDistance * Math.cos(getRadian(car.angle));\n      const targetY = sensor.maxDistance * Math.sin(getRadian(car.angle));\n      p.rotate(-car.angle);\n      p.line(0, 0, targetX, targetY);\n    });\n    p.stroke(1);\n  };\n\n  p.update = () => {\n    if (p.keyIsDown(87)) {\n      car.speedUp();\n    }\n\n    if (p.keyIsDown(83)) {\n      car.speedDown();\n    }\n\n    if (p.keyIsDown(65)) {\n      car.steerLeft();\n    }\n\n    if (p.keyIsDown(68)) {\n      car.steerRight();\n    }\n\n    car.update(worldPixels);\n  };\n\n  p.myCustomRedrawAccordingToNewPropsHandler = newProps => {\n    if (canvas) p.fill(newProps.color);\n  };\n\n  p.keyPressed = () => {\n    if (p.keyCode == 76) {\n      worldPixels = JSON.parse(window.localStorage.getItem('map'));\n      const image1 = p.get(0, 0, WIDTH, HEIGHT);\n      image1.loadPixels();\n\n      for (var i = 0; i < image1.pixels.length; i += 4) {\n        const startIndex = Math.floor(i / 4);\n        image1.pixels[i] = worldPixels[startIndex][0];\n        image1.pixels[i + 1] = worldPixels[startIndex][1];\n        image1.pixels[i + 2] = worldPixels[startIndex][2];\n      }\n\n      image1.updatePixels();\n      image = image1;\n    }\n  };\n}","map":{"version":3,"sources":["/home/caner/Desktop/selfcar/src/components/game-sketch.js"],"names":["WIDTH","HEIGHT","getRadian","angle","Math","PI","DistanceSensor","maxDistance","getValue","worldPixels","carX","carY","carAngle","targetX","sensor","cos","car","targetY","sin","Car","x","y","height","width","speed","sensors","maxSpeed","acceleration","speedUp","min","speedDown","max","steerLeft","steerRight","update","sensorData","collectSensorData","map","sketch","p","canvas","image","setup","createImage","createCanvas","noStroke","background","mousePressed","console","log","get","mouseX","mouseY","draw","translate","angleMode","DEGREES","rotate","fill","carRelativeCenterX","carRelativeCenterY","rect","stroke","line","keyIsDown","myCustomRedrawAccordingToNewPropsHandler","newProps","color","keyPressed","keyCode","JSON","parse","window","localStorage","getItem","image1","loadPixels","i","pixels","length","startIndex","floor","updatePixels"],"mappings":"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","sourcesContent":["const WIDTH = 640;\nconst HEIGHT = 480;\nconst getRadian = angle => angle * Math.PI / 180;\nclass DistanceSensor{\n  maxDistance = 100;\n  getValue = (worldPixels, carX, carY, carAngle) =>{\n    return 0;\n    const targetX = carX + sensor.maxDistance * Math.cos(getRadian(car.angle));\n    const targetY = carY + sensor.maxDistance * Math.sin(getRadian(car.angle));\n  };\n}\nclass Car{\n  x = 30;\n  y = 100;\n  height = 25;\n  width = 40;\n  speed = 0;\n  sensors = [new DistanceSensor()];\n  maxSpeed = 3;\n  acceleration = 0.5;\n  angle = 0;\n  speedUp = () => {\n    this.speed = Math.min(this.maxSpeed, this.speed += this.acceleration);\n  };\n  speedDown = () => {\n    this.speed = Math.max(0, this.speed -= this.acceleration);\n  };\n  steerLeft = () => {\n    this.angle = (this.angle -1) % 360;\n  }\n  steerRight = () => {\n    this.angle = (this.angle +1) % 360;\n  }\n  update = (worldPixels) => {\n    this.x += this.speed * Math.cos(getRadian(this.angle));\n    this.y += this.speed * Math.sin(getRadian(this.angle));\n    const sensorData = this.collectSensorData(worldPixels);\n  };\n  collectSensorData = (worldPixels) => {\n    return this.sensors.map(sensor => sensor.getValue(worldPixels, this.x, this.y, this.angle));\n  }\n};\nexport default function sketch(p){\n  let worldPixels;\n  let canvas;\n  let image;\n  const car = new Car();\n\n  p.setup = () => {\n    image = p.createImage(WIDTH, HEIGHT);\n    canvas = p.createCanvas(WIDTH, HEIGHT);\n    p.noStroke();\n    p.background(0);\n  }\n  p.mousePressed = () => {\n    console.log(p.get(p.mouseX, p.mouseY));\n  }\n  p.draw = () => {\n    p.background(255);\n    p.update();\n    if (image){\n      p.image(image,0,0,WIDTH,HEIGHT);\n    }\n    p.translate(car.x + car.width/2, car.y + car.height/2);\n    p.angleMode(p.DEGREES);\n    p.rotate( car.angle);\n    p.fill(150,100,200);\n    const carRelativeCenterX = 0-car.width / 2;\n    const carRelativeCenterY = 0-car.height / 2;\n    p.rect(carRelativeCenterX,carRelativeCenterY, car.width, car.height);\n    p.fill(150,150,150);\n    p.rect(carRelativeCenterX + 20 ,carRelativeCenterY + 5,10,15);\n    p.fill('black');\n    p.rect(carRelativeCenterX + 36,carRelativeCenterY + 0,4,6);\n    p.rect(carRelativeCenterX + 36,carRelativeCenterY + 19,4,6);\n    p.stroke('red');\n    car.sensors.map(sensor => {\n      const targetX = sensor.maxDistance * Math.cos(getRadian(car.angle));\n      const targetY = sensor.maxDistance * Math.sin(getRadian(car.angle));\n      p.rotate(-car.angle);\n      p.line(0,0,targetX,targetY);\n    });\n    p.stroke(1);\n  }\n  p.update = () => {\n      if (p.keyIsDown(87)){\n        car.speedUp();\n      }\n      if (p.keyIsDown(83)){\n        car.speedDown();\n      }\n      if (p.keyIsDown(65)){\n        car.steerLeft();\n      }\n      if (p.keyIsDown(68)){\n        car.steerRight();\n      }\n    car.update(worldPixels);\n  };\n  p.myCustomRedrawAccordingToNewPropsHandler = (newProps) => {\n    if(canvas)\n      p.fill(newProps.color);\n  }\n  p.keyPressed = () => {\n    if(p.keyCode == 76){\n        worldPixels = JSON.parse(window.localStorage.getItem('map'));\n        const image1 = p.get(0, 0, WIDTH, HEIGHT);\n        image1.loadPixels();\n        for(var i = 0; i < image1.pixels.length; i += 4){\n          const startIndex = Math.floor(i/4);\n          image1.pixels[i] = worldPixels[startIndex][0];\n          image1.pixels[i+1] = worldPixels[startIndex][1];\n          image1.pixels[i+2] = worldPixels[startIndex][2];\n      }\n      image1.updatePixels();\n      image=image1;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}