{"ast":null,"code":"import { Layer, Network } from 'synaptic';\n\nclass NNetwork {\n  constructor() {\n    this.learningRate = 0.3;\n    var inputLayer = new Layer(1);\n    var hiddenLayer = new Layer(5);\n    var outputLayer = new Layer(1);\n    inputLayer.project(hiddenLayer);\n    hiddenLayer.project(outputLayer);\n    this.nn = new Network({\n      input: inputLayer,\n      hidden: [hiddenLayer],\n      output: outputLayer\n    });\n    /*for(var i=0;i<10;i++){\n      this.nn.activate([Math.random()]);\n      this.nn.propagate(this.learningRate,\n        [Math.random(),Math.random(),Math.random(),Math.random()]);\n    }*/\n  }\n\n}\n\nconst WIDTH = 640;\nconst HEIGHT = 480;\n\nconst getRadian = angle => angle * Math.PI / 180;\n\nclass DistanceSensor {\n  constructor() {\n    this.maxDistance = 100;\n    this.foundX = 0;\n    this.foundY = 0;\n\n    this.findIntersection = (worldPixels, targetX, targetY, carX, carY, carAngle) => {\n      const distance = Math.sqrt(Math.pow(carX - targetX, 2) + Math.pow(carY - targetY), 2);\n\n      if (distance > this.maxDistance) {\n        return false;\n      }\n\n      const pixel = worldPixels[Math.floor(carY) * WIDTH + Math.floor(carX)];\n\n      if (pixel && pixel[0] !== 0) {\n        const centerX = carX + (targetX - carX) / 2;\n        const centerY = carY + (targetY - carY) / 2;\n        return this.findIntersection(worldPixels, carX + 1 * Math.cos(getRadian(carAngle)), carY + 1 * Math.sin(getRadian(carAngle)), centerX, centerY, carAngle);\n      }\n\n      return [carX, carY];\n    };\n\n    this.getValue = (worldPixels, carX, carY, carAngle) => {\n      const targetX = carX + this.maxDistance * Math.cos(getRadian(carAngle));\n      const targetY = carY + this.maxDistance * Math.sin(getRadian(carAngle));\n\n      if (worldPixels) {\n        const result = this.findIntersection(worldPixels, carX, carY, targetX, targetY, carAngle);\n        const [foundX, foundY] = result ? result : [targetX, targetY];\n        this.foundX = foundX;\n        this.foundY = foundY;\n        return Math.min(1, Math.sqrt(Math.pow(carX - foundX, 2) + Math.pow(carY - foundY, 2)) / this.maxDistance);\n      }\n\n      return 0;\n    };\n  }\n\n}\n\nclass Car {\n  constructor() {\n    this.x = 25;\n    this.y = 180;\n    this.height = 25;\n    this.width = 40;\n    this.speed = 0;\n    this.sensors = [new DistanceSensor()];\n    this.maxSpeed = 3;\n    this.acceleration = 0.5;\n    this.angle = 0;\n\n    this.speedUp = () => {\n      this.speed = Math.min(this.maxSpeed, this.speed += this.acceleration);\n    };\n\n    this.speedDown = () => {\n      this.speed = Math.max(0, this.speed -= this.acceleration);\n    };\n\n    this.steerLeft = () => {\n      this.angle = (this.angle - 1) % 360;\n    };\n\n    this.steerRight = () => {\n      this.angle = (this.angle + 1) % 360;\n    };\n\n    this.update = (myNetwork, worldPixels) => {\n      this.x += this.speed * Math.cos(getRadian(this.angle));\n      this.y += this.speed * Math.sin(getRadian(this.angle));\n      const sensorData = this.collectSensorData(worldPixels);\n\n      if (sensorData[0] === 0) {\n        myNetwork.nn.propagate(0.3, [0, 0, 0, 0]);\n      }\n\n      const [command] = myNetwork.nn.activate([sensorData]);\n\n      if (command < 0.25) {\n        this.speedUp();\n      } else if (command < 0.5) {\n        this.speedDown();\n      } else if (command < 0.75) {\n        this.steerLeft();\n      } else if (command <= 1) {\n        this.steerRight();\n      } //  myNetwork.propagate(learningRate, [0]);\n\n    };\n\n    this.collectSensorData = worldPixels => {\n      return this.sensors.map(sensor => sensor.getValue(worldPixels, this.x, this.y, this.angle));\n    };\n  }\n\n}\n\n;\nexport default function sketch(p) {\n  let worldPixels;\n  let canvas;\n  let image;\n  const car = new Car();\n  const myNetwork = new NNetwork();\n\n  p.setup = () => {\n    image = p.createImage(WIDTH, HEIGHT);\n    canvas = p.createCanvas(WIDTH, HEIGHT);\n    p.noStroke();\n    p.background(0);\n    worldPixels = JSON.parse(window.localStorage.getItem('map'));\n    const image1 = p.get(0, 0, WIDTH, HEIGHT);\n    image1.loadPixels();\n\n    for (var i = 0; i < image1.pixels.length; i += 4) {\n      const startIndex = Math.floor(i / 4);\n      image1.pixels[i] = worldPixels[startIndex][0];\n      image1.pixels[i + 1] = worldPixels[startIndex][1];\n      image1.pixels[i + 2] = worldPixels[startIndex][2];\n    }\n\n    image1.updatePixels();\n    image = image1;\n  };\n\n  p.mousePressed = () => {};\n\n  p.draw = () => {\n    p.background(255);\n    p.update();\n\n    if (image) {\n      p.image(image, 0, 0, WIDTH, HEIGHT);\n    }\n\n    p.translate(car.x + car.width / 2, car.y + car.height / 2);\n    p.angleMode(p.DEGREES);\n    p.rotate(car.angle);\n    p.fill(150, 100, 200);\n    const carRelativeCenterX = 0 - car.width / 2;\n    const carRelativeCenterY = 0 - car.height / 2;\n    p.rect(carRelativeCenterX, carRelativeCenterY, car.width, car.height);\n    p.fill(150, 150, 150);\n    p.rect(carRelativeCenterX + 20, carRelativeCenterY + 5, 10, 15);\n    p.fill('black');\n    p.rect(carRelativeCenterX + 36, carRelativeCenterY + 0, 4, 6);\n    p.rect(carRelativeCenterX + 36, carRelativeCenterY + 19, 4, 6);\n    p.stroke('red');\n    car.sensors.map(sensor => {\n      const targetX = sensor.maxDistance * Math.cos(getRadian(car.angle));\n      const targetY = sensor.maxDistance * Math.sin(getRadian(car.angle));\n      p.rotate(-car.angle);\n      p.line(0, 0, targetX, targetY);\n      p.translate(0, 0);\n      p.rect(sensor.foundX, sensor.foundY, 15, 15);\n    });\n    p.stroke(1);\n  };\n\n  p.update = () => {\n    if (p.keyIsDown(87)) {\n      car.speedUp();\n    }\n\n    if (p.keyIsDown(83)) {\n      car.speedDown();\n    }\n\n    if (p.keyIsDown(65)) {\n      car.steerLeft();\n    }\n\n    if (p.keyIsDown(68)) {\n      car.steerRight();\n    }\n\n    car.update(myNetwork, worldPixels);\n  };\n\n  p.myCustomRedrawAccordingToNewPropsHandler = newProps => {\n    if (canvas) p.fill(newProps.color);\n  };\n\n  p.keyPressed = () => {\n    if (p.keyCode == 76) {}\n  };\n}","map":{"version":3,"sources":["/home/caner/Desktop/selfcar/src/components/game-sketch.js"],"names":["Layer","Network","NNetwork","constructor","learningRate","inputLayer","hiddenLayer","outputLayer","project","nn","input","hidden","output","WIDTH","HEIGHT","getRadian","angle","Math","PI","DistanceSensor","maxDistance","foundX","foundY","findIntersection","worldPixels","targetX","targetY","carX","carY","carAngle","distance","sqrt","pow","pixel","floor","centerX","centerY","cos","sin","getValue","result","min","Car","x","y","height","width","speed","sensors","maxSpeed","acceleration","speedUp","speedDown","max","steerLeft","steerRight","update","myNetwork","sensorData","collectSensorData","propagate","command","activate","map","sensor","sketch","p","canvas","image","car","setup","createImage","createCanvas","noStroke","background","JSON","parse","window","localStorage","getItem","image1","get","loadPixels","i","pixels","length","startIndex","updatePixels","mousePressed","draw","translate","angleMode","DEGREES","rotate","fill","carRelativeCenterX","carRelativeCenterY","rect","stroke","line","keyIsDown","myCustomRedrawAccordingToNewPropsHandler","newProps","color","keyPressed","keyCode"],"mappings":"AAAA,SAAQA,KAAR,EAAeC,OAAf,QAA6B,UAA7B;;AACA,MAAMC,QAAN,CAAc;AAEZC,EAAAA,WAAW,GAAE;AAAA,SADbC,YACa,GADE,GACF;AACX,QAAIC,UAAU,GAAG,IAAIL,KAAJ,CAAU,CAAV,CAAjB;AACA,QAAIM,WAAW,GAAG,IAAIN,KAAJ,CAAU,CAAV,CAAlB;AACA,QAAIO,WAAW,GAAG,IAAIP,KAAJ,CAAU,CAAV,CAAlB;AACAK,IAAAA,UAAU,CAACG,OAAX,CAAmBF,WAAnB;AACAA,IAAAA,WAAW,CAACE,OAAZ,CAAoBD,WAApB;AACA,SAAKE,EAAL,GAAU,IAAIR,OAAJ,CAAY;AACpBS,MAAAA,KAAK,EAAEL,UADa;AAErBM,MAAAA,MAAM,EAAE,CAACL,WAAD,CAFa;AAGrBM,MAAAA,MAAM,EAAEL;AAHa,KAAZ,CAAV;AAKA;;;;;AAKD;;AAlBW;;AAoBd,MAAMM,KAAK,GAAG,GAAd;AACA,MAAMC,MAAM,GAAG,GAAf;;AACA,MAAMC,SAAS,GAAGC,KAAK,IAAIA,KAAK,GAAGC,IAAI,CAACC,EAAb,GAAkB,GAA7C;;AACA,MAAMC,cAAN,CAAoB;AAAA;AAAA,SAClBC,WADkB,GACJ,GADI;AAAA,SAElBC,MAFkB,GAET,CAFS;AAAA,SAGlBC,MAHkB,GAGT,CAHS;;AAAA,SAIlBC,gBAJkB,GAIC,CAACC,WAAD,EAAcC,OAAd,EAAuBC,OAAvB,EAAgCC,IAAhC,EAAsCC,IAAtC,EAA4CC,QAA5C,KAAyD;AAC1E,YAAMC,QAAQ,GAAGb,IAAI,CAACc,IAAL,CAAUd,IAAI,CAACe,GAAL,CAAUL,IAAI,GAAGF,OAAjB,EAA0B,CAA1B,IAA6BR,IAAI,CAACe,GAAL,CAASJ,IAAI,GAACF,OAAd,CAAvC,EAA8D,CAA9D,CAAjB;;AACA,UAAGI,QAAQ,GAAG,KAAKV,WAAnB,EAA+B;AAC7B,eAAO,KAAP;AACD;;AACD,YAAMa,KAAK,GAAGT,WAAW,CAACP,IAAI,CAACiB,KAAL,CAAWN,IAAX,IAAmBf,KAAnB,GAA2BI,IAAI,CAACiB,KAAL,CAAWP,IAAX,CAA5B,CAAzB;;AACA,UAAGM,KAAK,IAAIA,KAAK,CAAC,CAAD,CAAL,KAAa,CAAzB,EAA2B;AACzB,cAAME,OAAO,GAAGR,IAAI,GAAG,CAACF,OAAO,GAAGE,IAAX,IAAmB,CAA1C;AACA,cAAMS,OAAO,GAAGR,IAAI,GAAG,CAACF,OAAO,GAAGE,IAAX,IAAmB,CAA1C;AACA,eAAO,KAAKL,gBAAL,CAAsBC,WAAtB,EACLG,IAAI,GAAG,IAAIV,IAAI,CAACoB,GAAL,CAAStB,SAAS,CAACc,QAAD,CAAlB,CADN,EAELD,IAAI,GAAG,IAAIX,IAAI,CAACqB,GAAL,CAASvB,SAAS,CAACc,QAAD,CAAlB,CAFN,EAGLM,OAHK,EAILC,OAJK,EAKLP,QALK,CAAP;AAOD;;AACD,aAAO,CAACF,IAAD,EAAOC,IAAP,CAAP;AACD,KAtBiB;;AAAA,SAuBlBW,QAvBkB,GAuBP,CAACf,WAAD,EAAcG,IAAd,EAAoBC,IAApB,EAA0BC,QAA1B,KAAsC;AAC/C,YAAMJ,OAAO,GAAGE,IAAI,GAAG,KAAKP,WAAL,GAAmBH,IAAI,CAACoB,GAAL,CAAStB,SAAS,CAACc,QAAD,CAAlB,CAA1C;AACA,YAAMH,OAAO,GAAGE,IAAI,GAAG,KAAKR,WAAL,GAAmBH,IAAI,CAACqB,GAAL,CAASvB,SAAS,CAACc,QAAD,CAAlB,CAA1C;;AACA,UAAGL,WAAH,EAAe;AACb,cAAMgB,MAAM,GAAG,KAAKjB,gBAAL,CAAsBC,WAAtB,EAAmCG,IAAnC,EAAyCC,IAAzC,EAA+CH,OAA/C,EAAwDC,OAAxD,EAAiEG,QAAjE,CAAf;AACA,cAAM,CAACR,MAAD,EAASC,MAAT,IAAmBkB,MAAM,GAAGA,MAAH,GAAY,CAACf,OAAD,EAASC,OAAT,CAA3C;AACA,aAAKL,MAAL,GAAcA,MAAd;AACA,aAAKC,MAAL,GAAcA,MAAd;AACA,eAAOL,IAAI,CAACwB,GAAL,CAAS,CAAT,EAAWxB,IAAI,CAACc,IAAL,CAAUd,IAAI,CAACe,GAAL,CAAUL,IAAI,GAAGN,MAAjB,EAAyB,CAAzB,IAA4BJ,IAAI,CAACe,GAAL,CAAUJ,IAAI,GAAGN,MAAjB,EAAyB,CAAzB,CAAtC,IAAqE,KAAKF,WAArF,CAAP;AACD;;AACD,aAAO,CAAP;AACD,KAlCiB;AAAA;;AAAA;;AAqCpB,MAAMsB,GAAN,CAAS;AAAA;AAAA,SACPC,CADO,GACH,EADG;AAAA,SAEPC,CAFO,GAEH,GAFG;AAAA,SAGPC,MAHO,GAGE,EAHF;AAAA,SAIPC,KAJO,GAIC,EAJD;AAAA,SAKPC,KALO,GAKC,CALD;AAAA,SAMPC,OANO,GAMG,CAAC,IAAI7B,cAAJ,EAAD,CANH;AAAA,SAOP8B,QAPO,GAOI,CAPJ;AAAA,SAQPC,YARO,GAQQ,GARR;AAAA,SASPlC,KATO,GASC,CATD;;AAAA,SAUPmC,OAVO,GAUG,MAAM;AACd,WAAKJ,KAAL,GAAa9B,IAAI,CAACwB,GAAL,CAAS,KAAKQ,QAAd,EAAwB,KAAKF,KAAL,IAAc,KAAKG,YAA3C,CAAb;AACD,KAZM;;AAAA,SAaPE,SAbO,GAaK,MAAM;AAChB,WAAKL,KAAL,GAAa9B,IAAI,CAACoC,GAAL,CAAS,CAAT,EAAY,KAAKN,KAAL,IAAc,KAAKG,YAA/B,CAAb;AACD,KAfM;;AAAA,SAgBPI,SAhBO,GAgBK,MAAM;AAChB,WAAKtC,KAAL,GAAa,CAAC,KAAKA,KAAL,GAAY,CAAb,IAAkB,GAA/B;AACD,KAlBM;;AAAA,SAmBPuC,UAnBO,GAmBM,MAAM;AACjB,WAAKvC,KAAL,GAAa,CAAC,KAAKA,KAAL,GAAY,CAAb,IAAkB,GAA/B;AACD,KArBM;;AAAA,SAsBPwC,MAtBO,GAsBE,CAACC,SAAD,EAAWjC,WAAX,KAA2B;AAClC,WAAKmB,CAAL,IAAU,KAAKI,KAAL,GAAa9B,IAAI,CAACoB,GAAL,CAAStB,SAAS,CAAC,KAAKC,KAAN,CAAlB,CAAvB;AACA,WAAK4B,CAAL,IAAU,KAAKG,KAAL,GAAa9B,IAAI,CAACqB,GAAL,CAASvB,SAAS,CAAC,KAAKC,KAAN,CAAlB,CAAvB;AACA,YAAM0C,UAAU,GAAG,KAAKC,iBAAL,CAAuBnC,WAAvB,CAAnB;;AACA,UAAGkC,UAAU,CAAC,CAAD,CAAV,KAAkB,CAArB,EAAwB;AACtBD,QAAAA,SAAS,CAAChD,EAAV,CAAamD,SAAb,CAAuB,GAAvB,EAA2B,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,CAA3B;AACD;;AACD,YAAM,CAACC,OAAD,IAAYJ,SAAS,CAAChD,EAAV,CAAaqD,QAAb,CAAsB,CAACJ,UAAD,CAAtB,CAAlB;;AACA,UAAGG,OAAO,GAAC,IAAX,EAAgB;AACd,aAAKV,OAAL;AACD,OAFD,MAGK,IAAGU,OAAO,GAAC,GAAX,EAAe;AAClB,aAAKT,SAAL;AACD,OAFI,MAGA,IAAGS,OAAO,GAAC,IAAX,EAAgB;AACnB,aAAKP,SAAL;AACD,OAFI,MAGA,IAAGO,OAAO,IAAE,CAAZ,EAAc;AACjB,aAAKN,UAAL;AACD,OAnBiC,CAsBpC;;AAEC,KA9CM;;AAAA,SA+CPI,iBA/CO,GA+CcnC,WAAD,IAAiB;AACnC,aAAO,KAAKwB,OAAL,CAAae,GAAb,CAAiBC,MAAM,IAAIA,MAAM,CAACzB,QAAP,CAAgBf,WAAhB,EAA6B,KAAKmB,CAAlC,EAAqC,KAAKC,CAA1C,EAA6C,KAAK5B,KAAlD,CAA3B,CAAP;AACD,KAjDM;AAAA;;AAAA;;AAkDR;AACD,eAAe,SAASiD,MAAT,CAAgBC,CAAhB,EAAkB;AAC/B,MAAI1C,WAAJ;AACA,MAAI2C,MAAJ;AACA,MAAIC,KAAJ;AACA,QAAMC,GAAG,GAAG,IAAI3B,GAAJ,EAAZ;AACA,QAAMe,SAAS,GAAG,IAAIvD,QAAJ,EAAlB;;AACAgE,EAAAA,CAAC,CAACI,KAAF,GAAU,MAAM;AACdF,IAAAA,KAAK,GAAGF,CAAC,CAACK,WAAF,CAAc1D,KAAd,EAAqBC,MAArB,CAAR;AACAqD,IAAAA,MAAM,GAAGD,CAAC,CAACM,YAAF,CAAe3D,KAAf,EAAsBC,MAAtB,CAAT;AACAoD,IAAAA,CAAC,CAACO,QAAF;AACAP,IAAAA,CAAC,CAACQ,UAAF,CAAa,CAAb;AACAlD,IAAAA,WAAW,GAAGmD,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,KAA5B,CAAX,CAAd;AACA,UAAMC,MAAM,GAAGd,CAAC,CAACe,GAAF,CAAM,CAAN,EAAS,CAAT,EAAYpE,KAAZ,EAAmBC,MAAnB,CAAf;AACAkE,IAAAA,MAAM,CAACE,UAAP;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGH,MAAM,CAACI,MAAP,CAAcC,MAAjC,EAAyCF,CAAC,IAAI,CAA9C,EAAgD;AAC9C,YAAMG,UAAU,GAAGrE,IAAI,CAACiB,KAAL,CAAWiD,CAAC,GAAC,CAAb,CAAnB;AACAH,MAAAA,MAAM,CAACI,MAAP,CAAcD,CAAd,IAAmB3D,WAAW,CAAC8D,UAAD,CAAX,CAAwB,CAAxB,CAAnB;AACAN,MAAAA,MAAM,CAACI,MAAP,CAAcD,CAAC,GAAC,CAAhB,IAAqB3D,WAAW,CAAC8D,UAAD,CAAX,CAAwB,CAAxB,CAArB;AACAN,MAAAA,MAAM,CAACI,MAAP,CAAcD,CAAC,GAAC,CAAhB,IAAqB3D,WAAW,CAAC8D,UAAD,CAAX,CAAwB,CAAxB,CAArB;AACH;;AACDN,IAAAA,MAAM,CAACO,YAAP;AACAnB,IAAAA,KAAK,GAACY,MAAN;AACC,GAhBD;;AAiBAd,EAAAA,CAAC,CAACsB,YAAF,GAAiB,MAAM,CACtB,CADD;;AAEAtB,EAAAA,CAAC,CAACuB,IAAF,GAAS,MAAM;AACbvB,IAAAA,CAAC,CAACQ,UAAF,CAAa,GAAb;AACAR,IAAAA,CAAC,CAACV,MAAF;;AACA,QAAIY,KAAJ,EAAU;AACRF,MAAAA,CAAC,CAACE,KAAF,CAAQA,KAAR,EAAc,CAAd,EAAgB,CAAhB,EAAkBvD,KAAlB,EAAwBC,MAAxB;AACD;;AACDoD,IAAAA,CAAC,CAACwB,SAAF,CAAYrB,GAAG,CAAC1B,CAAJ,GAAQ0B,GAAG,CAACvB,KAAJ,GAAU,CAA9B,EAAiCuB,GAAG,CAACzB,CAAJ,GAAQyB,GAAG,CAACxB,MAAJ,GAAW,CAApD;AACAqB,IAAAA,CAAC,CAACyB,SAAF,CAAYzB,CAAC,CAAC0B,OAAd;AACA1B,IAAAA,CAAC,CAAC2B,MAAF,CAAUxB,GAAG,CAACrD,KAAd;AACAkD,IAAAA,CAAC,CAAC4B,IAAF,CAAO,GAAP,EAAW,GAAX,EAAe,GAAf;AACA,UAAMC,kBAAkB,GAAG,IAAE1B,GAAG,CAACvB,KAAJ,GAAY,CAAzC;AACA,UAAMkD,kBAAkB,GAAG,IAAE3B,GAAG,CAACxB,MAAJ,GAAa,CAA1C;AACAqB,IAAAA,CAAC,CAAC+B,IAAF,CAAOF,kBAAP,EAA0BC,kBAA1B,EAA8C3B,GAAG,CAACvB,KAAlD,EAAyDuB,GAAG,CAACxB,MAA7D;AACAqB,IAAAA,CAAC,CAAC4B,IAAF,CAAO,GAAP,EAAW,GAAX,EAAe,GAAf;AACA5B,IAAAA,CAAC,CAAC+B,IAAF,CAAOF,kBAAkB,GAAG,EAA5B,EAAgCC,kBAAkB,GAAG,CAArD,EAAuD,EAAvD,EAA0D,EAA1D;AACA9B,IAAAA,CAAC,CAAC4B,IAAF,CAAO,OAAP;AACA5B,IAAAA,CAAC,CAAC+B,IAAF,CAAOF,kBAAkB,GAAG,EAA5B,EAA+BC,kBAAkB,GAAG,CAApD,EAAsD,CAAtD,EAAwD,CAAxD;AACA9B,IAAAA,CAAC,CAAC+B,IAAF,CAAOF,kBAAkB,GAAG,EAA5B,EAA+BC,kBAAkB,GAAG,EAApD,EAAuD,CAAvD,EAAyD,CAAzD;AACA9B,IAAAA,CAAC,CAACgC,MAAF,CAAS,KAAT;AACA7B,IAAAA,GAAG,CAACrB,OAAJ,CAAYe,GAAZ,CAAgBC,MAAM,IAAI;AACxB,YAAMvC,OAAO,GAAGuC,MAAM,CAAC5C,WAAP,GAAqBH,IAAI,CAACoB,GAAL,CAAStB,SAAS,CAACsD,GAAG,CAACrD,KAAL,CAAlB,CAArC;AACA,YAAMU,OAAO,GAAGsC,MAAM,CAAC5C,WAAP,GAAqBH,IAAI,CAACqB,GAAL,CAASvB,SAAS,CAACsD,GAAG,CAACrD,KAAL,CAAlB,CAArC;AACAkD,MAAAA,CAAC,CAAC2B,MAAF,CAAS,CAACxB,GAAG,CAACrD,KAAd;AACAkD,MAAAA,CAAC,CAACiC,IAAF,CAAO,CAAP,EAAS,CAAT,EAAW1E,OAAX,EAAmBC,OAAnB;AACAwC,MAAAA,CAAC,CAACwB,SAAF,CAAY,CAAZ,EAAc,CAAd;AACAxB,MAAAA,CAAC,CAAC+B,IAAF,CAAOjC,MAAM,CAAC3C,MAAd,EAAqB2C,MAAM,CAAC1C,MAA5B,EAAmC,EAAnC,EAAsC,EAAtC;AACD,KAPD;AAQA4C,IAAAA,CAAC,CAACgC,MAAF,CAAS,CAAT;AACD,GA5BD;;AA6BAhC,EAAAA,CAAC,CAACV,MAAF,GAAW,MAAM;AACf,QAAIU,CAAC,CAACkC,SAAF,CAAY,EAAZ,CAAJ,EAAoB;AAClB/B,MAAAA,GAAG,CAAClB,OAAJ;AACD;;AACD,QAAIe,CAAC,CAACkC,SAAF,CAAY,EAAZ,CAAJ,EAAoB;AAClB/B,MAAAA,GAAG,CAACjB,SAAJ;AACD;;AACD,QAAIc,CAAC,CAACkC,SAAF,CAAY,EAAZ,CAAJ,EAAoB;AAClB/B,MAAAA,GAAG,CAACf,SAAJ;AACD;;AACD,QAAIY,CAAC,CAACkC,SAAF,CAAY,EAAZ,CAAJ,EAAoB;AAClB/B,MAAAA,GAAG,CAACd,UAAJ;AACD;;AACDc,IAAAA,GAAG,CAACb,MAAJ,CAAWC,SAAX,EAAqBjC,WAArB;AACD,GAdD;;AAeA0C,EAAAA,CAAC,CAACmC,wCAAF,GAA8CC,QAAD,IAAc;AACzD,QAAGnC,MAAH,EACED,CAAC,CAAC4B,IAAF,CAAOQ,QAAQ,CAACC,KAAhB;AACH,GAHD;;AAIArC,EAAAA,CAAC,CAACsC,UAAF,GAAe,MAAM;AACnB,QAAGtC,CAAC,CAACuC,OAAF,IAAa,EAAhB,EAAmB,CAElB;AACF,GAJD;AAKD","sourcesContent":["import {Layer, Network} from 'synaptic';\nclass NNetwork{\n  learningRate = 0.3;\n  constructor(){\n    var inputLayer = new Layer(1);\n    var hiddenLayer = new Layer(5);\n    var outputLayer = new Layer(1);\n    inputLayer.project(hiddenLayer);\n    hiddenLayer.project(outputLayer);\n    this.nn = new Network({\n      input: inputLayer,\n    \thidden: [hiddenLayer],\n    \toutput: outputLayer\n    });\n    /*for(var i=0;i<10;i++){\n      this.nn.activate([Math.random()]);\n      this.nn.propagate(this.learningRate,\n        [Math.random(),Math.random(),Math.random(),Math.random()]);\n    }*/\n  }\n}\nconst WIDTH = 640;\nconst HEIGHT = 480;\nconst getRadian = angle => angle * Math.PI / 180;\nclass DistanceSensor{\n  maxDistance = 100;\n  foundX = 0;\n  foundY = 0;\n  findIntersection = (worldPixels, targetX, targetY, carX, carY, carAngle) => {\n    const distance = Math.sqrt(Math.pow((carX - targetX),2)+Math.pow(carY-targetY),2)\n    if(distance > this.maxDistance){\n      return false;\n    }\n    const pixel = worldPixels[Math.floor(carY) * WIDTH + Math.floor(carX)];\n    if(pixel && pixel[0] !== 0){\n      const centerX = carX + (targetX - carX) / 2;\n      const centerY = carY + (targetY - carY) / 2;\n      return this.findIntersection(worldPixels,\n        carX + 1 * Math.cos(getRadian(carAngle)),\n        carY + 1 * Math.sin(getRadian(carAngle)),\n        centerX,\n        centerY,\n        carAngle\n      );\n    }\n    return [carX, carY];\n  }\n  getValue = (worldPixels, carX, carY, carAngle) =>{\n    const targetX = carX + this.maxDistance * Math.cos(getRadian(carAngle));\n    const targetY = carY + this.maxDistance * Math.sin(getRadian(carAngle));\n    if(worldPixels){\n      const result = this.findIntersection(worldPixels, carX, carY, targetX, targetY, carAngle);\n      const [foundX, foundY] = result ? result : [targetX,targetY];\n      this.foundX = foundX;\n      this.foundY = foundY;\n      return Math.min(1,Math.sqrt(Math.pow((carX - foundX),2)+Math.pow((carY - foundY),2)) / this.maxDistance);\n    }\n    return 0;\n  };\n}\n\nclass Car{\n  x = 25;\n  y = 180;\n  height = 25;\n  width = 40;\n  speed = 0;\n  sensors = [new DistanceSensor()];\n  maxSpeed = 3;\n  acceleration = 0.5;\n  angle = 0;\n  speedUp = () => {\n    this.speed = Math.min(this.maxSpeed, this.speed += this.acceleration);\n  };\n  speedDown = () => {\n    this.speed = Math.max(0, this.speed -= this.acceleration);\n  };\n  steerLeft = () => {\n    this.angle = (this.angle -1) % 360;\n  }\n  steerRight = () => {\n    this.angle = (this.angle +1) % 360;\n  }\n  update = (myNetwork,worldPixels) => {\n    this.x += this.speed * Math.cos(getRadian(this.angle));\n    this.y += this.speed * Math.sin(getRadian(this.angle));\n    const sensorData = this.collectSensorData(worldPixels);\n    if(sensorData[0] === 0) {\n      myNetwork.nn.propagate(0.3,[0,0,0,0]);\n    }\n    const [command] = myNetwork.nn.activate([sensorData]);\n    if(command<0.25){\n      this.speedUp();\n    }\n    else if(command<0.5){\n      this.speedDown();\n    }\n    else if(command<0.75){\n      this.steerLeft();\n    }\n    else if(command<=1){\n      this.steerRight();\n    }\n\n\n  //  myNetwork.propagate(learningRate, [0]);\n\n  };\n  collectSensorData = (worldPixels) => {\n    return this.sensors.map(sensor => sensor.getValue(worldPixels, this.x, this.y, this.angle));\n  }\n};\nexport default function sketch(p){\n  let worldPixels;\n  let canvas;\n  let image;\n  const car = new Car();\n  const myNetwork = new NNetwork();\n  p.setup = () => {\n    image = p.createImage(WIDTH, HEIGHT);\n    canvas = p.createCanvas(WIDTH, HEIGHT);\n    p.noStroke();\n    p.background(0);\n    worldPixels = JSON.parse(window.localStorage.getItem('map'));\n    const image1 = p.get(0, 0, WIDTH, HEIGHT);\n    image1.loadPixels();\n    for(var i = 0; i < image1.pixels.length; i += 4){\n      const startIndex = Math.floor(i/4);\n      image1.pixels[i] = worldPixels[startIndex][0];\n      image1.pixels[i+1] = worldPixels[startIndex][1];\n      image1.pixels[i+2] = worldPixels[startIndex][2];\n  }\n  image1.updatePixels();\n  image=image1;\n  }\n  p.mousePressed = () => {\n  }\n  p.draw = () => {\n    p.background(255);\n    p.update();\n    if (image){\n      p.image(image,0,0,WIDTH,HEIGHT);\n    }\n    p.translate(car.x + car.width/2, car.y + car.height/2);\n    p.angleMode(p.DEGREES);\n    p.rotate( car.angle);\n    p.fill(150,100,200);\n    const carRelativeCenterX = 0-car.width / 2;\n    const carRelativeCenterY = 0-car.height / 2;\n    p.rect(carRelativeCenterX,carRelativeCenterY, car.width, car.height);\n    p.fill(150,150,150);\n    p.rect(carRelativeCenterX + 20 ,carRelativeCenterY + 5,10,15);\n    p.fill('black');\n    p.rect(carRelativeCenterX + 36,carRelativeCenterY + 0,4,6);\n    p.rect(carRelativeCenterX + 36,carRelativeCenterY + 19,4,6);\n    p.stroke('red');\n    car.sensors.map(sensor => {\n      const targetX = sensor.maxDistance * Math.cos(getRadian(car.angle));\n      const targetY = sensor.maxDistance * Math.sin(getRadian(car.angle));\n      p.rotate(-car.angle);\n      p.line(0,0,targetX,targetY);\n      p.translate(0,0);\n      p.rect(sensor.foundX,sensor.foundY,15,15);\n    });\n    p.stroke(1);\n  }\n  p.update = () => {\n    if (p.keyIsDown(87)){\n      car.speedUp();\n    }\n    if (p.keyIsDown(83)){\n      car.speedDown();\n    }\n    if (p.keyIsDown(65)){\n      car.steerLeft();\n    }\n    if (p.keyIsDown(68)){\n      car.steerRight();\n    }\n    car.update(myNetwork,worldPixels);\n  };\n  p.myCustomRedrawAccordingToNewPropsHandler = (newProps) => {\n    if(canvas)\n      p.fill(newProps.color);\n  }\n  p.keyPressed = () => {\n    if(p.keyCode == 76){\n\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}