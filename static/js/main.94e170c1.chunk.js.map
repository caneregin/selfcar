{"version":3,"sources":["logo.svg","components/game-sketch.js","components/game.js","components/draw-sketch.js","components/draw-map.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NNetwork","learningRate","inputLayer","Layer","hiddenLayer1","outputLayer","project","this","nn","Network","input","hidden","output","getRadian","angle","Math","PI","DistanceSensor","maxDistance","foundX","foundY","findIntersection","counter","worldPixels","carX","carY","targetX","targetY","carAngle","sqrt","pow","pixel","floor","cos","sin","getValue","result","min","carCounter","Car","speedUp","speedDown","steerLeft","steerRight","update","myNetwork","x","speed","y","sensorData","collectSensorData","console","log","reset","activate","shouldSteerLeft","newSensorData","propagate","sensors","map","sensor","id","start","Date","now","width","height","maxSpeed","acc","sketch","p","cars","i","push","canvas","image","setup","createCanvas","noStroke","background","JSON","parse","window","localStorage","getItem","image1","get","loadPixels","pixels","length","startIndex","updatePixels","mousePressed","mouseX","mouseY","draw","car","rectMode","CENTER","translate","angleMode","DEGREES","rotate","fill","rect","stroke","line","forEach","myCustomRedrawAccordingToNewPropsHandler","newProps","color","keyPressed","keyCode","DrawMap","style","display","justifyContent","alignItems","React","Component","createImage","mouseIsPressed","ellipse","px","R","G","B","setItem","stringify","App","state","mode","onGameClick","setState","onDrawMapClick","onClick","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.94e170c1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import {Network, Layer} from 'synaptic';\n\nclass NNetwork {\n  learningRate = 0.3;\n\n  constructor() {\n    var inputLayer = new Layer(2);\n    var hiddenLayer1 = new Layer(10);\n    // var hiddenLayer2 = new Layer(5);\n    var outputLayer = new Layer(2);\n    inputLayer.project(hiddenLayer1);\n    hiddenLayer1.project(outputLayer);\n    // hiddenLayer2.project(outputLayer);\n    this.nn = new Network({\n    \tinput: inputLayer,\n    \thidden: [hiddenLayer1],\n    \toutput: outputLayer\n    });\n\n    // console.log(this.nn)\n    // for (var i = 0; i < 10; i++) {\n    // \tthis.nn.activate([Math.random()]);\n    // \tthis.nn.propagate(\n    //     this.learningRate,\n    //     [Math.random(), Math.random(), Math.random(), Math.random()]\n    //   );\n    // }\n    // console.log('trained')\n    // console.log(this.nn.activate([Math.random()]));\n  }\n}\n\nconst WIDTH = 640;\nconst HEIGHT = 480;\n\nconst getRadian = angle => angle * Math.PI / 180\n\nclass DistanceSensor {\n  maxDistance = 100;\n  foundX = 0;\n  foundY = 0;\n\n  findIntersection = (counter, worldPixels, carX, carY, targetX, targetY, carAngle) => {\n    const distance = Math.sqrt(\n      Math.pow((carX - targetX), 2) +\n      Math.pow((carY - targetY), 2)\n    )\n    // console.log(distance)\n    if (counter > this.maxDistance) {\n      return false;\n    }\n    const pixel = worldPixels[Math.floor(carY) * WIDTH + Math.floor(carX)];\n    if (pixel && pixel[0] !== 0) {\n      // const centerX = carX + (targetX - carX ) / 2\n      // const centerY = carY + (targetY - carY ) / 2\n      return this.findIntersection(\n        counter + 1,\n        worldPixels,\n        carX + 1 * Math.cos(getRadian(carAngle)),\n        carY + 1 * Math.sin(getRadian(carAngle)),\n        targetX,\n        targetY,\n        carAngle\n      )\n    }\n    return [carX, carY]\n  }\n\n  getValue = (worldPixels, carX, carY, carAngle) => {\n    const targetX = carX + this.maxDistance * Math.cos(getRadian(carAngle)) + 20;\n    const targetY = carY + this.maxDistance * Math.sin(getRadian(carAngle)) + 12.5;\n    if (worldPixels) {\n      const result = this.findIntersection(0, worldPixels, carX, carY, targetX, targetY, carAngle);\n      const [foundX, foundY] = result ? result : [targetX, targetY]\n      this.foundX = foundX;\n      this.foundY = foundY;\n      return Math.min(1,\n        Math.sqrt(Math.pow((carX - foundX), 2) + Math.pow((carY - foundY), 2))\n        / this.maxDistance\n      );\n    }\n    return 0;\n  };\n}\n\nlet carCounter = 0;\n\nclass Car {\n  constructor() {\n    this.reset();\n    this.id = carCounter++;\n  }\n\n  reset() {\n    this.start = Date.now();\n    this.x = 80;\n    this.y = 100;\n    this.width = 40;\n    this.height = 25;\n    this.angle = 0;\n    this.sensors = [new DistanceSensor()];\n\n    this.speed = 2;\n    this.maxSpeed = 3;\n    this.acc = 0.5;\n  }\n\n  speedUp = () => {\n    // this.speed = Math.min(this.maxSpeed, this.speed += this.acc);\n  };\n\n  speedDown = () => {\n    // this.speed = Math.max(0.1, this.speed -= this.acc);\n  };\n\n  steerLeft = () => {\n    this.angle = (this.angle - 4) % 360;\n  }\n\n  steerRight = () => {\n    this.angle = (this.angle + 4) % 360;\n  }\n\n  update = (myNetwork, worldPixels) => {\n    this.x += this.speed * Math.cos(getRadian(this.angle));\n    this.y += this.speed * Math.sin(getRadian(this.angle));\n\n    const sensorData = this.collectSensorData(worldPixels);\n    \n    if (sensorData[0] === 0) {\n      console.log('dead')\n      this.reset();\n    \t// myNetwork.nn.propagate(0.3, [((Date.now() - this.start) / 1000) / 20]);\n    } else {\n    \t// myNetwork.nn.propagate(0.3, [1]);\n    }\n\n\n    // TODO angle?\n    let [output1, output2] = myNetwork.nn.activate([\n      sensorData, this.angle\n    ]);\n\n    // if (this.speed === 0.1) {\n    //   console.log(this.id);\n    //   myNetwork.nn.propagate(0.1, [\n    //     Math.random(),\n    //     0.6\n    //   ])\n    // }\n\n    const shouldSteerLeft = output1 > output2\n    if (shouldSteerLeft) {\n      this.steerLeft();\n    } else {\n      this.steerRight();\n    }\n\n    // if (speed <= 0.5) {\n    //   this.speedDown();\n    // } else if (speed > 0.5) {\n    //   this.speedUp();\n    // }\n\n    const newSensorData = this.collectSensorData(worldPixels);\n    if (newSensorData[0] === 1) {\n      myNetwork.nn.propagate(0.3, [\n        0.5,\n        0.5\n      ])\n    } else if (newSensorData[0] < sensorData[0]){\n      myNetwork.nn.propagate(0.2,\n        shouldSteerLeft ? [0, 1] : [1, 0])\n    } else {\n      // myNetwork.nn.propagate(0.2, [output1, output2])\n    }\n  };\n\n  collectSensorData = (worldPixels) => {\n    return this.sensors.map(sensor =>\n      sensor.getValue(worldPixels, this.x, this.y, this.angle));\n  }\n};\n\nexport default function sketch(p){\n    let frameCount = 0;\n    const cars = [];\n    for (var i = 0; i < 100; i++) {\n      cars.push(new Car())\n    }\n    const myNetwork = new NNetwork();\n    let worldPixels;\n    let canvas;\n    let image;\n\n    p.setup = () => {\n      canvas = p.createCanvas(WIDTH, HEIGHT);\n      p.noStroke();\n      p.background(255);\n\n      worldPixels = JSON.parse(window.localStorage.getItem('map'));\n      const image1 = p.get(0, 0, WIDTH, HEIGHT);\n      image1.loadPixels();\n      for (var i = 0; i < image1.pixels.length; i += 4) {\n        const startIndex = Math.floor(i / 4);\n        image1.pixels[i] = worldPixels[startIndex][0];\n        image1.pixels[i + 1] = worldPixels[startIndex][1];\n        image1.pixels[i + 2] = worldPixels[startIndex][2];\n        image1.pixels[i + 3] = 255;\n      }\n      image1.updatePixels();\n      image = image1;\n    }\n\n    p.mousePressed = () => {\n      console.log(p.get(p.mouseX, p.mouseY));\n    }\n\n    p.draw = () => {\n      p.update();\n\n      if (true ) { //frameCount++ % 30 === 0) {\n\n        p.background(255);\n        if (image) {\n          p.image(image, 0, 0, WIDTH, HEIGHT);\n        }\n\n        const car = cars[0];\n        p.rectMode(p.CENTER)\n        p.translate(car.x, car.y);\n        p.angleMode(p.DEGREES);\n        p.rotate(car.angle);\n        p.fill(150, 100, 200);\n        p.rect(0, 0, car.width, car.height);\n        p.fill(150, 150, 150);\n        p.rect(10, 0, 10, 15);\n        p.fill('black');\n        p.rect(25, -8.5, 4, 6);\n        p.rect(25, 8.5, 4, 6);\n\n        p.stroke('red');\n        car.sensors.map(sensor => {\n          const targetX = sensor.maxDistance * Math.cos(getRadian(car.angle));\n          const targetY = sensor.maxDistance * Math.sin(getRadian(car.angle));\n          p.rotate(-car.angle);\n          p.line(0, 0, targetX, targetY)\n          p.rect(sensor.foundX - car.x, sensor.foundY - car.y, 15, 15);\n        });\n        p.stroke(0);\n      }\n    }\n\n    p.update = () => {\n      /*\n      if (p.keyIsDown(87)) {\n        // UP\n        car.speedUp();\n      }\n      if (p.keyIsDown(83)) {\n        car.speedDown();\n      }\n      if (p.keyIsDown(65)) {\n        // LEFT\n        car.steerLeft();\n      }\n      if (p.keyIsDown(68)) {\n        car.steerRight();\n      }\n      */\n\n      cars.forEach(car =>\n        car.update(myNetwork, worldPixels)\n      );\n    };\n\n    p.myCustomRedrawAccordingToNewPropsHandler = (newProps) => {\n      if(canvas) //Make sure the canvas has been created\n        p.fill(newProps.color);\n    }\n\n    p.keyPressed = () => {\n      if (p.keyCode === 76) {\n\n      }\n    }\n}\n","import React from 'react';\nimport P5Wrapper from 'react-p5-wrapper';\nimport sketch from './game-sketch';\n\nclass DrawMap extends React.Component{\n  render() {\n    return (\n      <div style={{width: '100%', height: '100%'}}>\n        <div style={{width: '100%', height: '100%', display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\n          <P5Wrapper sketch={sketch} color={'red'}></P5Wrapper>\n        </div>\n      </div>\n      );\n  }\n}\nexport default DrawMap;\n","const WIDTH = 640;\nconst HEIGHT = 480;\nexport default function sketch(p){\n  let canvas;\n  let image;\n  p.setup = () => {\n    image = p.createImage(WIDTH, HEIGHT);\n    canvas = p.createCanvas(WIDTH, HEIGHT);\n    p.noStroke();\n    p.background(255);\n  }\n  p.mousePressed = () => {\n    console.log(p.get(p.mouseX, p.mouseY));\n  }\n  p.draw = () => {\n    p.fill('black');\n    p.noStroke(0);\n    if (p.mouseIsPressed === true) {\n      p.ellipse(p.mouseX, p.mouseY,40,40);\n    }\n  }\n  p.myCustomRedrawAccordingToNewPropsHandler = (newProps) => {\n    if(canvas)\n      p.fill(newProps.color);\n  }\n  p.keyPressed = () => {\n    if (p.keyCode === 83) {\n       console.log('z')\n       const image1 = p.get(0, 0, WIDTH, HEIGHT);\n       image1.loadPixels();\n       const px = [];\n       for (var i = 0; i < image1.pixels.length; i += 4) {\n         const R = image1.pixels[i];\n         const G = image1.pixels[i + 1];\n         const B = image1.pixels[i + 2];\n         px.push([R, G, B]);\n       }\n       console.log('saved')\n        window.localStorage.setItem('map', JSON.stringify(px));\n    }\n  }\n}\n","import React from 'react';\nimport P5Wrapper from 'react-p5-wrapper';\nimport sketch from './draw-sketch';\n\nclass DrawMap extends React.Component {\n  render() {\n    return (\n      <div style={{width: '100%', height: '100%'}}>\n        <div style={{display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\n          <P5Wrapper sketch={sketch} color={'red'}></P5Wrapper>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default DrawMap;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Game from './components/game';\nimport DrawMap from './components/draw-map';\n\nclass App extends React.Component {\n  state = {\n    mode: 'game'\n  }\n  onGameClick = () => {\n    this.setState({mode: 'game'});\n  }\n  onDrawMapClick = () => {\n    this.setState({mode: 'draw'});\n  }\n  render() {\n    return (\n      <div style={{width: '100%', height: '100%'}}>\n        <div style={{display: 'flex'}}>\n          <div onClick={this.onGameClick} style={{display: 'flex', justifyContent: 'center', alignItems: 'center', width: '50%', height: '40px', color: 'white'}}>\n            Game\n          </div>\n          <div onClick={this.onDrawMapClick} style={{display: 'flex', justifyContent: 'center', alignItems: 'center', width: '50%', height: '40px', color: 'white'}}>\n            Draw Map\n          </div>\n        </div>\n        {this.state.mode === 'game' ? <Game /> : <DrawMap />}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}